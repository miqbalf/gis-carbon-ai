# Custom MapStore Dockerfile
# Multi-stage build: Clone, build, and deploy custom MapStore

# Stage 1: Build custom MapStore from source
FROM maven:3.8.4-openjdk-11 AS builder

# Set working directory
WORKDIR /usr/src/mapstore2

# Clone MapStore2 repository and checkout specific version
RUN git clone https://github.com/geosolutions-it/MapStore2.git . \
    && git checkout v2025.01.02

# Install Node.js and npm
RUN apt-get update && \
    apt-get install -y nodejs npm && \
    npm install -g n && \
    n 20.19.0

# Install frontend dependencies
RUN npm install

# Add our custom configuration files
COPY localConfig.json /usr/src/mapstore2/web/client/configs/localConfig.json
COPY pluginsConfig.json /usr/src/mapstore2/web/client/configs/pluginsConfig.json

# Build the frontend
RUN npm run compile

# Build the WAR file
RUN mvn clean install -Dmapstore2.version=2025.01.02 -DskipTests

# Stage 2: Deploy to Tomcat
FROM tomcat:9.0-jdk11-openjdk-slim

# Set environment variables
ENV CATALINA_HOME=/usr/local/tomcat
ENV CATALINA_BASE=/usr/local/tomcat

# Copy the built WAR file from builder stage
COPY --from=builder /usr/src/mapstore2/target/mapstore.war /usr/local/tomcat/webapps/

# Create necessary directories
RUN mkdir -p /usr/local/tomcat/webapps/mapstore/configs \
    && mkdir -p /usr/local/tomcat/webapps/mapstore/extensions

# Create extensions.json
RUN echo "[]" > /usr/local/tomcat/webapps/mapstore/extensions/extensions.json

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/mapstore/ || exit 1

# Start Tomcat
CMD ["catalina.sh", "run"]
