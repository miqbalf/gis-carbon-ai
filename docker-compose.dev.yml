services:
  # PostgreSQL with PostGIS
  postgres:
    image: postgis/postgis:16-3.4
    container_name: gis_postgres_dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: gis_carbon
      POSTGRES_USER: gis_user
      POSTGRES_PASSWORD: gis_password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - gis_network_dev

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: gis_redis_dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data_dev:/data
    networks:
      - gis_network_dev

  # Django Backend (Development)
  django:
    build:
      context: ./backend
      dockerfile: Dockerfile-dev
    container_name: gis_django_dev
    restart: unless-stopped
    environment:
      - DEBUG=1
      - DB_ENGINE=django.db.backends.postgresql
      - DB_DATABASE=gis_carbon
      - DB_USER=gis_user
      - DB_PASSWORD=gis_password
      - DB_HOST=postgres
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_ADMIN_EMAIL=admin@admin.com
      - DJANGO_ADMIN_PASSWORD=admin
      - FASTAPI_GEE_URL=http://fastapi:8000
      - DJANGO_ALLOWED_HOSTS=127.0.0.1 localhost 0.0.0.0
      - GEOSERVER_ROLE_SHARED_SECRET=EGhbDepgQZPGQCEpTddXrkpEaOkvBYjx
    volumes:
      - django_static_dev:/usr/src/static
      - django_media_dev:/usr/src/media
      - ./backend/sv_carbon_removal/:/usr/src/app
      - ./backend/user_id.json:/usr/src/app/user_id.json
      - ./auth:/usr/src/app/auth
      - /Users/miqbalf/gis-carbon-ai/GEE_notebook_Forestry:/usr/src/app/gee_lib:ro
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - gis_network_dev
    command: /usr/src/app/start_dev.sh

  # FastAPI for GEE Tile Service (Development)
  fastapi:
    build:
      context: .
      dockerfile: ./fastapi-gee-service/Dockerfile
    container_name: gis_fastapi_dev
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis:6379/1
      - POSTGRES_URL=postgresql://gis_user:gis_password@postgres:5432/gis_carbon
      - GEE_SERVICE_ACCOUNT=iqbalpythonapi@bukit30project.iam.gserviceaccount.com
    volumes:
      - ./backend/user_id.json:/app/user_id.json
      - gee_tiles_cache_dev:/app/cache
      - ./fastapi-gee-service:/app
      - ./auth:/app/auth
      - /Users/miqbalf/gis-carbon-ai/GEE_notebook_Forestry:/app/gee_lib:ro
    ports:
      - "8001:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - gis_network_dev
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # GeoServer
  geoserver:
    build:
      context: ./geoserver
      dockerfile: Dockerfile
    image: gis_geoserver_custom:2.26.0
    container_name: gis_geoserver_dev
    restart: unless-stopped
    environment:
      - GEOSERVER_ADMIN_PASSWORD=admin
      - GEOSERVER_ADMIN_USER=admin
      - GEOSERVER_DATA_DIR=/geoserver_data/data
      - GEOSERVER_LOG_LEVEL=INFO
      - GEOWEBCACHE_CACHE_DIR=/tmp/gwc
      # CORS Configuration
      - GEOSERVER_CORS_ENABLED=True
      - GEOSERVER_CORS_ALLOWED_ORIGINS=*
      - GEOSERVER_CORS_ALLOWED_METHODS=GET,POST,PUT,DELETE,HEAD,OPTIONS
      - GEOSERVER_CORS_ALLOWED_HEADERS=Content-Type,Authorization,X-Requested-With,Accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers
      - GEOSERVER_CORS_EXPOSED_HEADERS=Access-Control-Allow-Origin,Access-Control-Allow-Credentials
      - GEOSERVER_CORS_SUPPORT_CREDENTIALS=false
      - GEOSERVER_CORS_PREFLIGHT_MAXAGE=10
      # Database Configuration
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=gis_carbon_data
      - DATABASE_USER=gis_user
      - DATABASE_PASSWORD=gis_password
      - DATABASE_SCHEMA=public
      - RASTER_SCHEMA=raster_data
      # GeoServer Configuration
      - GEOSERVER_HOST=localhost
      - GEOSERVER_PORT=8080
      - WORKSPACE=gis_carbon
      - DATASTORE=gis_carbon_postgis
      # Java Options (Java 17 compatible)
      - CATALINA_OPTS=-Xms512m -Xmx2048m -Djava.security.egd=file:/dev/./urandom -Djava.awt.headless=true -Dfile.encoding=UTF-8 -Djavax.servlet.request.encoding=UTF-8 -Djavax.servlet.response.encoding=UTF-8 -XX:-UseContainerSupport -XX:MaxRAMPercentage=75.0 -XX:+DisableAttachMechanism -Dcom.sun.management.jmxremote=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.util.prefs.systemRoot=/tmp/.java -Djava.util.prefs.userRoot=/tmp/.java -Djava.rmi.server.hostname=localhost -Djava.rmi.server.randomIDs=true -Djdk.disableAttachMechanism=true -Djava.management.agent=false
      - JAVA_TOOL_OPTIONS=-XX:+DisableAttachMechanism -Dcom.sun.management.jmxremote=false
      - JDK_JAVA_OPTIONS=-XX:+DisableAttachMechanism -Dcom.sun.management.jmxremote=false -Djava.util.prefs.systemRoot=/tmp/.java -Djava.util.prefs.userRoot=/tmp/.java
    volumes:
      - geoserver_data_dev:/geoserver_data/data
      - geoserver_extensions_cache:/tmp/geoserver-extensions-cache
    ports:
      - "8080:8080"
    networks:
      - gis_network_dev
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8080/geoserver/rest/about/version.json", "-u", "admin:admin"]
      interval: 30s
      timeout: 10s
      start_period: 90s
      retries: 5
    command: /usr/local/tomcat/tmp/entrypoint.sh

  # MapStore (Custom Build with PostgreSQL Integration)
  mapstore:
    build:
      context: ./mapstore
      dockerfile: Dockerfile
      args:
        OVR: "geostore-datasource-ovr-postgres.properties"
        MAPSTORE_VERSION: ${MAPSTORE_VERSION:-v2025.01.02}
    container_name: gis_mapstore_dev
    restart: unless-stopped
    environment:
      - CATALINA_OPTS=-Xms512m -Xmx2048m -Dgeostore-ovr=file:///usr/local/tomcat/conf/geostore-datasource-ovr-postgres.properties
      - JAVA_OPTS=-Djava.security.egd=file:/dev/./urandom -Djava.awt.headless=true -Ddatadir.location=/usr/local/tomcat/datadir
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_NAME=gis_carbon
      - DATABASE_USER=gis_user
      - DATABASE_PASSWORD=gis_password
      - MAPSTORE_VERSION=v2025.01.02
      - GEOSERVER_URL=http://geoserver:8080/geoserver
    volumes:
      # Database configuration
      - ./mapstore/geostore-datasource-ovr-postgres.properties:/usr/local/tomcat/conf/geostore-datasource-ovr-postgres.properties
      
      # Proxy configuration
      - ./mapstore/proxy.properties:/usr/local/tomcat/datadir/proxy.properties
      
      # Persistent data directories
      - mapstore_data_dev:/usr/local/tomcat/datadir
      - mapstore_webapps_dev:/usr/local/tomcat/webapps/mapstore/data
      - mapstore_logs_dev:/usr/local/tomcat/logs
      - mapstore_temp_dev:/usr/local/tomcat/temp
      - mapstore_work_dev:/usr/local/tomcat/work
      
      # Configuration persistence
      - ./mapstore/config/localConfig.json:/usr/local/tomcat/webapps/mapstore/configs/localConfig.json
      - ./mapstore/proxy.properties:/usr/local/tomcat/datadir/proxy.properties
      - mapstore_config_dev:/usr/local/tomcat/webapps/mapstore/config
      
      # Authentication and plugins persistence
      - mapstore_auth_dev:/usr/local/tomcat/webapps/mapstore/auth
      - mapstore_plugins_dev:/usr/local/tomcat/webapps/mapstore/plugins
      
      # User uploads and custom content
      - mapstore_uploads_dev:/usr/local/tomcat/webapps/mapstore/uploads
      - mapstore_custom_dev:/usr/local/tomcat/webapps/mapstore/custom
    ports:
      - "8082:8080"
    networks:
      - gis_network_dev
    command: >
      bash -c "
        wait-for-postgres postgres 5432 gis_user gis_password &&
        catalina.sh run &
        setup-mapstore-sso &&
        wait
      "
    depends_on:
      - postgres
      - geoserver

  # Jupyter Lab for testing and development (using Django container)
  jupyter:
    build:
      context: ./backend
      dockerfile: Dockerfile-dev
    container_name: gis_jupyter_dev
    restart: unless-stopped
    environment:
      - PYTHONPATH=/usr/src/app:/usr/src/app/gee_lib:/usr/src/app/ex_ante_lib:/usr/src/app/forestry_carbon_arr
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=
      - JUPYTER_ALLOW_ROOT=1
    volumes:
      - ./jupyter/notebooks:/usr/src/app/notebooks
      - ./jupyter/data:/usr/src/app/data
      - ./jupyter/shared:/usr/src/app/shared
      - ./backend/user_id.json:/usr/src/app/user_id.json
      - ./GEE_notebook_Forestry:/usr/src/app/gee_lib:ro
      - ./ex_ante:/usr/src/app/ex_ante_lib:ro
      - ./forestry_carbon_arr:/usr/src/app/forestry_carbon_arr:ro
      - ./mapstore/config:/usr/src/app/mapstore/config
    ports:
      - "8888:8888"
    networks:
      - gis_network_dev
    depends_on:
      - postgres
      - redis
      - geoserver
    command: >
      bash -c "
        pip install jupyterlab ipykernel ipywidgets matplotlib seaborn plotly folium python-dotenv &&
        pip install -e /usr/src/app/forestry_carbon_arr[gee,ml,satellite,visualization] &&
        jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root 
        --NotebookApp.token='' --NotebookApp.password='' 
        --NotebookApp.disable_check_xsrf=True --NotebookApp.allow_origin='*' 
        --NotebookApp.allow_remote_access=True --ServerApp.root_dir=/usr/src/app/notebooks
      "

volumes:
  postgres_data_dev:
  redis_data_dev:
  django_static_dev:
  django_media_dev:
  geoserver_data_dev:
  geoserver_extensions_cache:
  gee_tiles_cache_dev:
  
  # MapStore persistent volumes
  mapstore_data_dev:
  mapstore_webapps_dev:
  mapstore_logs_dev:
  mapstore_temp_dev:
  mapstore_work_dev:
  mapstore_config_dev:
  mapstore_auth_dev:
  mapstore_plugins_dev:
  mapstore_uploads_dev:
  mapstore_custom_dev:

networks:
  gis_network_dev:
    driver: bridge
