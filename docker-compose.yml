version: '3.8'

services:
  # PostgreSQL with PostGIS
  postgres:
    image: postgis/postgis:16-3.4
    container_name: gis_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: gis_carbon_db
      POSTGRES_USER: gis_user
      POSTGRES_PASSWORD: gis_password
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - gis_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gis_user -d gis_carbon_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: gis_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gis_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Django Backend
  django:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gis_django
    restart: unless-stopped
    environment:
      - DEBUG=1
      - DB_ENGINE=django.db.backends.postgresql
      - DB_DATABASE=gis_carbon_db
      - DB_USER=gis_user
      - DB_PASSWORD=gis_password
      - DB_HOST=postgres
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - django_static:/usr/src/static
      - django_media:/usr/src/media
      - ./backend/user_id.json:/usr/src/app/user_id.json
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - gis_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # FastAPI for GEE Tile Service
  fastapi:
    build:
      context: ./fastapi-gee-service
      dockerfile: Dockerfile
    container_name: gis_fastapi
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis:6379/1
      - POSTGRES_URL=postgresql://gis_user:gis_password@postgres:5432/gis_carbon_db
      - GEE_SERVICE_ACCOUNT=iqbalpythonapi@bukit30project.iam.gserviceaccount.com
    volumes:
      - ./backend/user_id.json:/app/user_id.json
      - gee_tiles_cache:/app/cache
    ports:
      - "8001:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - gis_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # GeoServer
  geoserver:
    image: kartoza/geoserver:2.24.0
    container_name: gis_geoserver
    restart: unless-stopped
    environment:
      - GEOSERVER_ADMIN_PASSWORD=admin
      - GEOSERVER_ADMIN_USER=admin
      - GEOSERVER_DATA_DIR=/opt/geoserver/data_dir
      - GEOSERVER_LOG_LEVEL=INFO
      - GEOWEBCACHE_CACHE_DIR=/opt/geoserver/data_dir/gwc
      - GEOSERVER_OPTS=-Xms512m -Xmx2048m
    volumes:
      - geoserver_data:/opt/geoserver/data_dir
      - ./geoserver/config:/opt/geoserver/data_dir
    ports:
      - "8080:8080"
    networks:
      - gis_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/geoserver/"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MapStore Frontend
  mapstore:
    build:
      context: ./mapstore-frontend
      dockerfile: Dockerfile
    container_name: gis_mapstore
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_FASTAPI_URL=http://localhost:8001
      - REACT_APP_GEOSERVER_URL=http://localhost:8080/geoserver
    ports:
      - "3000:80"
    depends_on:
      - django
      - fastapi
      - geoserver
    networks:
      - gis_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: gis_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - django_static:/var/www/static
      - django_media:/var/www/media
    depends_on:
      - django
      - fastapi
      - geoserver
      - mapstore
    networks:
      - gis_network

volumes:
  postgres_data:
  redis_data:
  django_static:
  django_media:
  geoserver_data:
  gee_tiles_cache:

networks:
  gis_network:
    driver: bridge
