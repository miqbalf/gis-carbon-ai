# Byte-compiled / optimized / DLL files
__pycache__/
*.py[codz]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py.cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock
#poetry.toml

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#   pdm recommends including project-wide configuration in pdm.toml, but excluding .pdm-python.
#   https://pdm-project.org/en/latest/usage/project/#working-with-version-control
#pdm.lock
#pdm.toml
.pdm-python
.pdm-build/

# pixi
#   Similar to Pipfile.lock, it is generally recommended to include pixi.lock in version control.
#pixi.lock
#   Pixi creates a virtual environment in the .pixi directory, just like venv module creates one
#   in the .venv directory. It is recommended not to include this directory in version control.
.pixi

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.envrc
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Abstra
# Abstra is an AI-powered process automation framework.
# Ignore directories containing user credentials, local state, and settings.
# Learn more at https://abstra.io/docs
.abstra/

# Visual Studio Code
#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore 
#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
#  and can be added to the global gitignore or merged into this file. However, if you prefer, 
#  you could uncomment the following to ignore the entire vscode folder
# .vscode/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Cursor
#  Cursor is an AI-powered code editor. `.cursorignore` specifies files/directories to
#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data
#  refer to https://docs.cursor.com/context/ignore-files
.cursorignore
.cursorindexingignore

# Marimo
marimo/_static/
marimo/_lsp/
__marimo__/

# GIS Carbon AI - Sensitive Files
# Environment files
.env
.env.local
.env.development
.env.production
.env.staging
backend/.env
backend/.env.local
backend/.env.development
backend/.env.production
fastapi-gee-service/.env
fastapi-gee-service/.env.local
fastapi-gee-service/.env.development
fastapi-gee-service/.env.production

# Google Cloud Platform credentials
user_id.json
*.json
!package.json
!package-lock.json
!tsconfig.json
!jsconfig.json
!mapstore/config/localConfig.json
backend/user_id.json
fastapi-gee-service/user_id.json
**/user_id.json
**/service-account*.json
**/credentials*.json
**/gcp-*.json

# Database files
*.db
*.sqlite3
backend/db.sqlite3
backend/db.sqlite3-journal

# Docker volumes and data
postgres_data/
redis_data/
geoserver_data/
django_static/
django_media/
gee_tiles_cache/

# Docker volume directories (development)
gis-carbon-ai_django_media_dev/
gis-carbon-ai_django_static_dev/
gis-carbon-ai_gee_tiles_cache_dev/
gis-carbon-ai_geoserver_data_dev/
gis-carbon-ai_mapstore_data_dev/
gis-carbon-ai_postgres_data_dev/
gis-carbon-ai_redis_data_dev/

# Docker volume directories (production)
gis-carbon-ai_django_media/
gis-carbon-ai_django_static/
gis-carbon-ai_gee_tiles_cache/
gis-carbon-ai_geoserver_data/
gis-carbon-ai_mapstore_data/
gis-carbon-ai_postgres_data/
gis-carbon-ai_redis_data/

# Logs
*.log
logs/
backend/logs/
fastapi-gee-service/logs/

# SSL certificates
*.pem
*.key
*.crt
*.p12
*.pfx
nginx/ssl/

# Backup files
*.backup
*.bak
backup_restore/

# IDE and editor files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Temporary files
tmp/
temp/
*.tmp
*.temp

# GIS Carbon AI - Additional Exclusions
# Jupyter notebook checkpoints and data
jupyter/notebooks/.ipynb_checkpoints/
# jupyter/notebooks/*.ipynb
jupyter/data/*
!jupyter/data/.gitkeep
jupyter/shared/*
!jupyter/shared/.gitkeep
!mapstore/configs/localConfig.json
!mapstore/configs/geoserver-integration-config.json
!mapstore/configs/gee-integration-config.json
!mapstore/configs/mapstore-unified-auth-config.json
!mapstore/configs/default-localConfig.json

# MapStore configuration (may contain sensitive URLs)
# Note: geostore-datasource-ovr-postgres.properties is needed for fresh installs
# mapstore/localConfig.json
# mapstore/geostore-datasource-ovr-postgres.properties

# FastAPI enhanced files (development)
fastapi-gee-service/enhanced_main.py
fastapi-gee-service/auth_layers.py

# Documentation that may contain sensitive info
*_SETUP_SUMMARY.md
*_INTEGRATION.md
*_ANALYSIS.md

# Backend data and media files
backend/sv_carbon_removal/media/
backend/sv_carbon_removal/static/
backend/sv_carbon_removal/logs/
backend/sv_carbon_removal/uploads/

# GEE library data (keep structure, exclude data)
GEE_notebook_Forestry/data/
GEE_notebook_Forestry/output/
GEE_notebook_Forestry/cache/
GEE_notebook_Forestry/*.ipynb
GEE_notebook_Forestry/.ipynb_checkpoints/

# Ex-ante library data
ex_ante/data/
ex_ante/output/
ex_ante/cache/
