"""
MapStore JWT Authentication Integration for Django
Handles JWT tokens generated by MapStore for unified authentication
"""

import jwt
from django.conf import settings
from django.contrib.auth import get_user_model
from rest_framework.authentication import BaseAuthentication
from rest_framework.exceptions import AuthenticationFailed
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework import status
import logging

logger = logging.getLogger(__name__)

class MapStoreJWTAuthentication(BaseAuthentication):
    """
    JWT Authentication class that validates tokens generated by MapStore
    """
    
    def authenticate(self, request):
        """
        Authenticate user using MapStore JWT token
        """
        token = self.get_token_from_request(request)
        if not token:
            return None
        
        try:
            # Decode JWT token
            payload = jwt.decode(
                token, 
                settings.MAPSTORE_JWT_SECRET, 
                algorithms=['HS256'],
                issuer=settings.MAPSTORE_JWT_ISSUER
            )
            
            user_id = payload.get('user_id')
            username = payload.get('username')
            email = payload.get('email') or payload.get('user_email')
            roles = payload.get('roles', [])
            permissions = payload.get('permissions', {})
            
            if not user_id or not (email or username):
                raise AuthenticationFailed('Invalid token payload')
            
            # Get or create user from Django
            DjangoUser = get_user_model()
            lookup = {'email': email} if email else {'email': f"{username}@example.local"}
            defaults = {
                'name': username or (email.split('@')[0] if email else ''),
                'is_active': True,
                'is_staff': 'admin' in roles
            }
            # Note: do not set primary key 'id' via defaults; let DB assign
            user, created = DjangoUser.objects.get_or_create(**lookup, defaults=defaults)
            
            # Add custom attributes to user object
            user.mapstore_token = token
            user.roles = roles
            user.permissions = permissions
            
            logger.info(f"Authenticated user {email or username} with roles: {roles}")
            
            return (user, token)
            
        except jwt.ExpiredSignatureError:
            logger.warning("JWT token expired")
            raise AuthenticationFailed('Token expired')
        except jwt.InvalidTokenError as e:
            logger.warning(f"Invalid JWT token: {e}")
            raise AuthenticationFailed('Invalid token')
        except Exception as e:
            logger.error(f"Authentication error: {e}")
            raise AuthenticationFailed('Authentication failed')
    
    def get_token_from_request(self, request):
        """
        Extract JWT token from request headers
        """
        auth_header = request.META.get('HTTP_AUTHORIZATION')
        if auth_header and auth_header.startswith('Bearer '):
            return auth_header.split(' ')[1]
        return None

class MapStoreTokenValidationView(APIView):
    """
    API endpoint for validating MapStore JWT tokens
    Used by other services to validate tokens
    """
    authentication_classes = []  # No authentication required for this endpoint
    permission_classes = []
    
    def post(self, request):
        """
        Validate JWT token and return user information
        """
        try:
            token = request.data.get('token')
            if not token:
                return Response(
                    {'valid': False, 'error': 'No token provided'}, 
                    status=status.HTTP_400_BAD_REQUEST
                )
            
            # Validate token
            auth = MapStoreJWTAuthentication()
            user, validated_token = auth.authenticate(request)
            
            if user:
                return Response({
                    'valid': True,
                    'user': {
                        'id': user.id,
                        'email': getattr(user, 'email', ''),
                        'name': getattr(user, 'name', ''),
                        'roles': getattr(user, 'roles', []),
                        'permissions': getattr(user, 'permissions', {}),
                        'is_staff': user.is_staff,
                        'is_active': user.is_active
                    }
                })
            else:
                return Response(
                    {'valid': False, 'error': 'Invalid token'}, 
                    status=status.HTTP_401_UNAUTHORIZED
                )
                
        except Exception as e:
            logger.error(f"Token validation error: {e}")
            return Response(
                {'valid': False, 'error': str(e)}, 
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

class MapStoreLoginView(APIView):
    """
    Login endpoint that integrates with MapStore authentication
    """
    authentication_classes = []
    permission_classes = []
    
    def post(self, request):
        """
        Authenticate user and return user info for MapStore JWT generation
        """
        try:
            username = request.data.get('username')
            password = request.data.get('password')
            
            if not username or not password:
                return Response(
                    {'error': 'Username and password required'}, 
                    status=status.HTTP_400_BAD_REQUEST
                )
            
            # Authenticate user
            from django.contrib.auth import authenticate
            user = authenticate(username=username, password=password)
            
            if user and user.is_active:
                # Get user roles and permissions
                roles = self.get_user_roles(user)
                permissions = self.get_user_permissions(user, roles)
                
                return Response({
                    'success': True,
                    'user': {
                        'id': user.id,
                        'username': user.username,
                        'email': user.email,
                        'first_name': user.first_name,
                        'last_name': user.last_name,
                        'roles': roles,
                        'permissions': permissions,
                        'is_staff': user.is_staff,
                        'is_active': user.is_active
                    }
                })
            else:
                return Response(
                    {'error': 'Invalid credentials'}, 
                    status=status.HTTP_401_UNAUTHORIZED
                )
                
        except Exception as e:
            logger.error(f"Login error: {e}")
            return Response(
                {'error': 'Login failed'}, 
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
    
    def get_user_roles(self, user):
        """
        Get user roles based on Django user properties
        """
        roles = ['viewer']  # Default role
        
        if user.is_staff:
            roles.append('admin')
        elif user.is_active:
            roles.append('analyst')
        
        # You can add more role logic here based on user groups, etc.
        return roles
    
    def get_user_permissions(self, user, roles):
        """
        Get user permissions based on roles
        """
        permissions = {
            'django': [],
            'geoserver': [],
            'gee': []
        }
        
        if 'admin' in roles:
            permissions = {
                'django': ['read', 'write', 'admin'],
                'geoserver': ['read', 'write', 'admin'],
                'gee': ['read', 'analyze', 'export', 'admin']
            }
        elif 'analyst' in roles:
            permissions = {
                'django': ['read', 'write'],
                'geoserver': ['read', 'write'],
                'gee': ['read', 'analyze', 'export']
            }
        else:  # viewer
            permissions = {
                'django': ['read'],
                'geoserver': ['read'],
                'gee': ['read']
            }
        
        return permissions

# Helper function for token validation
def validate_mapstore_token(token):
    """
    Helper function to validate MapStore JWT token
    """
    try:
        payload = jwt.decode(
            token, 
            settings.MAPSTORE_JWT_SECRET, 
            algorithms=['HS256'],
            issuer=settings.MAPSTORE_JWT_ISSUER
        )
        return payload
    except jwt.ExpiredSignatureError:
        return None
    except jwt.InvalidTokenError:
        return None

# Permission checking decorator
def require_mapstore_permission(service, action):
    """
    Decorator to check MapStore permissions
    """
    def decorator(view_func):
        def wrapper(request, *args, **kwargs):
            if hasattr(request.user, 'permissions'):
                user_permissions = request.user.permissions
                service_perms = user_permissions.get(service, [])
                
                if action not in service_perms:
                    return Response(
                        {'error': f'Insufficient permissions for {action} on {service}'}, 
                        status=status.HTTP_403_FORBIDDEN
                    )
            
            return view_func(request, *args, **kwargs)
        return wrapper
    return decorator
